let Koa,Router,bodyParser,mongoose,api,createFakeData;_62a‍.w("koa",[["default",["Koa"],function(v){Koa=v}]]);_62a‍.w("koa-router",[["default",["Router"],function(v){Router=v}]]);_62a‍.w("koa-bodyparser",[["default",["bodyParser"],function(v){bodyParser=v}]]);_62a‍.w("mongoose",[["default",["mongoose"],function(v){mongoose=v}]]);_62a‍.w("./api",[["default",["api"],function(v){api=v}]]);_62a‍.w("./createFakeData",[["default",["createFakeData"],function(v){createFakeData=v}]]);require('dotenv').config();








const { PORT, MONGO_URL } = process.env;

mongoose
  .connect(MONGO_URL, {
    useNewUrlParser: true,
    useFindAndModify: false,
  })
  .then(() => {
    console.log('몽고디비 연결됨');
  })
  .catch((e) => {
    _62a‍.g.console.error(e);
  });

const app = new Koa();
const router = new Router();

// 라우터 설정
router.use('/api', api.routes());

// 라우터 적용 전 bodyParser 적용
app.use(bodyParser());

// app 인스턴스에 라우터 적용
app
  .use(router.routes())
  .use(router.allowedMethods());

// PORT가 지정되지 않으면 4000번
const port = PORT || 4000;
app.listen(port, () => {
  console.log(`Listening to port ${port}`);
});
